#!/run/current-system/sw/bin/bash

set -e

check_root() {
    if [[ $(id -u) -ne 0 ]]; then
        echo "Please run as root." && exit 1
    fi
}

check_os() {
    case "$OSTYPE" in
    darwin*) rebuild='darwin-rebuild' ;;
    linux*) rebuild='nixos-rebuild --use-remote-sudo --upgrade' ;;
    *) echo "Unknown OS type." && exit 1 ;;
    esac
}

check_machine() {
    case "$OSTYPE" in
    darwin*) machine='macbook' ;;
    linux*)
        if [[ -f /sys/firmware/devicetree/base/model ]]; then
            model=$(tr -d '\0' </sys/firmware/devicetree/base/model)
        elif [[ -f /sys/devices/virtual/dmi/id/board_name ]]; then
            model=$(tr -d '\0' </sys/devices/virtual/dmi/id/board_name)
        elif [[ -f /sys/devices/virtual/dmi/id/sys_vendor ]]; then
            model=$(tr -d '\0' </sys/devices/virtual/dmi/id/sys_vendor)
        else
            echo "Unknown machine." && exit 1
        fi
        case "$model" in
        DN2800MT*) machine='kimsufi' ;;
        Microsoft*) machine='hyperv' ;;
        Parallels*) machine='parallels' ;;
        Pine64*) machine='pinephone' ;;
        Raspberry*) machine='raspberrypi' ;;
        *) echo "Unknown machine." && exit 1 ;;
        esac
        ;;
    *) echo "Unknown machine." && exit 1 ;;
    esac
}

format_and_mount() {
    umount /dev/sda* || true
    umount -R /mnt || true
    parted -s /dev/sda mklabel gpt
    parted -s /dev/sda mkpart ESP fat32 1MiB 512MiB
    parted -s /dev/sda set 1 esp on
    parted -s /dev/sda mkpart primary ext4 512MiB 100%
    yes | mkfs.fat -F 32 -n boot /dev/sda1
    yes | mkfs.ext4 -L nixos /dev/sda2
    sleep 1
    mkdir -p /mnt
    mount /dev/sda2 /mnt
    mkdir -p /mnt/boot
    mount /dev/sda1 /mnt/boot
}

install() {
    nix-shell -p nixUnstable --run \
        "nixos-install --no-root-passwd --root /mnt --flake .#$1"
}

netinstall() {
    nix-shell -p nixUnstable --run \
        "nixos-install --no-root-passwd --root /mnt --flake github:wegank/nixos-config#$1"
}

clean() {
    nix store gc
}

update() {
    nix flake update
}

upgrade() {
    $rebuild switch --flake ".#$1" --no-write-lock-file
}

full_upgrade() {
    $rebuild switch --flake ".#$1" --recreate-lock-file
}

trap 'exit 1' ERR

if [[ $1 == "clean" ]] && [[ $2 == "" ]]; then
    clean
    exit
elif [[ $1 == "update" ]] && [[ $2 == "" ]]; then
    update
    exit
elif [[ $1 == "upgrade" ]] && [[ $3 == "" ]]; then
    check_os
    check_machine
    upgrade "${2:-$machine}"
    exit
elif [[ $1 == "full-upgrade" ]] && [[ $3 == "" ]]; then
    check_os
    check_machine
    full_upgrade "${2:-$machine}"
    exit
elif [[ $1 == "install" ]] && [[ $3 == "" ]]; then
    check_root
    check_machine
    format_and_mount
    sleep 1
    install "${2:-$machine}"
    umount -R /mnt || true
    exit
elif [[ $1 == "netinstall" ]] && [[ $3 == "" ]]; then
    check_root
    check_machine
    format_and_mount
    sleep 1
    netinstall "${2:-$machine}"
    umount -R /mnt || true
    exit
fi

echo "Unrecognized command."
exit 1
