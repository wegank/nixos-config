#!/run/current-system/sw/bin/bash

default=parallels-unfree

set -e

check_root() {
    if [[ $(id -u) -ne 0 ]]; then
        echo "Please run as root."
        exit 1
    fi
}

format_and_mount() {
    umount /dev/sda* || true
    umount -R /mnt || true
    parted -s /dev/sda mklabel gpt
    parted -s /dev/sda mkpart ESP fat32 1MiB 512MiB
    parted -s /dev/sda set 1 esp on
    parted -s /dev/sda mkpart primary ext4 512MiB 100%
    yes | mkfs.fat -F 32 -n boot /dev/sda1
    yes | mkfs.ext4 -L nixos /dev/sda2
    sleep 1
    mkdir -p /mnt
    mount /dev/sda2 /mnt
    mkdir -p /mnt/boot
    mount /dev/sda1 /mnt/boot
}

install() {
    nix-shell -p nixUnstable --run \
        "nixos-install --no-root-passwd --root /mnt --flake .#$1"
}

netinstall() {
    nix-shell -p nixUnstable --run \
        "nixos-install --no-root-passwd --root /mnt --flake github:wegank/nixos-config#$1"
}

check_os() {
    case "$OSTYPE" in
    darwin*) REBUILD='darwin-rebuild' ;;
    linux*) REBUILD='nixos-rebuild --use-remote-sudo --upgrade' ;;
    *) echo "Unknown OS type." && exit 1 ;;
    esac
}

upgrade() {
    $REBUILD switch --flake ".#$1" --no-write-lock-file
}

full_upgrade() {
    $REBUILD switch --flake ".#$1" --recreate-lock-file
}

clean() {
    nix-collect-garbage -d
}

trap 'exit 1' ERR

if [[ $1 == "upgrade" ]] && [[ $3 == "" ]]; then
    check_os
    upgrade "${2:-$default}"
    exit
elif [[ $1 == "full-upgrade" ]] && [[ $3 == "" ]]; then
    check_os
    full_upgrade "${2:-$default}"
    exit
elif [[ $1 == "clean" ]] && [[ $2 == "" ]]; then
    clean
    exit
elif [[ $1 == "install" ]] && [[ $3 == "" ]]; then
    check_root
    format_and_mount
    sleep 1
    install "${2:-$default}"
    umount -R /mnt || true
    exit
elif [[ $1 == "netinstall" ]] && [[ $3 == "" ]]; then
    check_root
    format_and_mount
    sleep 1
    netinstall "${2:-$default}"
    umount -R /mnt || true
    exit
fi

echo "Unrecognized command."
exit 1
